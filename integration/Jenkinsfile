pipeline {

    agent none

    options {
        buildDiscarder logRotator(
                    daysToKeepStr: '16',
                    numToKeepStr: '10'
            )
    }
    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'Version')
        string(name: 'BRANCH',  defaultValue: 'main', description: '[Optional] Branch name to clone. Default (main) ')
        string(name: 'DOCKER',  defaultValue: '', description: 'http url of docker tar build or docker image')
        string(name: 'RPM',     defaultValue: '', description: 'http url of rpm file')
        string(name: 'NATIVE',  defaultValue: '', description: 'http url of native tar file')
    }
    environment {
        BUILD_ID="dontKillMe"
        JENKINS_NODE_COOKIE="dontKillMe"
        GO_VERSION = "1.20.3"
    }
    
    stages {
        stage('Setup') {
            agent {
                label "master"
            }
            steps {
                sh '''
                echo "Setup"
                '''
            }
        }
        stage('Run Tests') {
            parallel {
                stage('NATIVE') {
                    agent {
                        label "native"
                    }
                    stages('Test on RPM Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install NATIVE pkg') {
                            steps {
                                sh '''
                                echo "Installing"
                                export BUILD_PATH=$NATIVE
                                export VERSION=$VERSION
                                cp /u/mpeg/harvest/harvest_targets.yml $WORKSPACE/harvest/container/prometheus/
                                bash $WORKSPACE/harvest/integration/test/test.sh install_native
                                '''
                            }
                        }
                        stage('Running Test') {
                            steps {
                                sh """
                                export VERSION=$VERSION
                                bash $WORKSPACE/harvest/integration/test/test.sh regression
                                """
                            }
                        }
                        stage('Evaluating Alert Rules') {
                            steps {
                                sh """
                                bash $WORKSPACE/harvest/integration/test/test.sh nonbookendemstest
                                bash $WORKSPACE/harvest/integration/test/test.sh bookendemstest
                                """
                            }
                            post {
                                always {
                                     sh '''
                                         rm -f native_logs.zip
                                         zip -r native_logs.zip /var/log/harvest
                                         '''
                                     archiveArtifacts artifacts: "native_logs.zip", fingerprint: true
                                }
                            }
                        }
                    }

                }
                stage('RPM') {
                    agent {
                        label "rhel"
                    }
                    stages('Test on RPM Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install RPM pkg') {
                            steps {
                                sh '''
                                echo "Installing"
                                export BUILD_PATH=http://harvest-jenkins.rtp.openenglab.netapp.com:8080/job/harvest2_0/job/artifcats/lastSuccessfulBuild/artifact/harvest-21.11.0-1.x86_64.rpm
                                export VERSION=$VERSION
                                cp /u/mpeg/harvest/harvest_targets.yml $WORKSPACE/harvest/container/prometheus/
                                bash $WORKSPACE/harvest/integration/test/test.sh install_rpm
                                '''
                            }
                        }
                        stage('Upgrade RPM pkg') {
                            steps {
                                sh '''
                                echo "Upgrading"
                                export BUILD_PATH=$RPM
                                export VERSION=$VERSION
                                bash $WORKSPACE/harvest/integration/test/test.sh upgrade_rpm
                                sleep 1m
                                '''
                            }
                        }
                        stage('Running Test') {
                            steps {
                                sh """
                                bash $WORKSPACE/harvest/integration/test/test.sh regression
                                """
                            }
                            post {
                                always {
                                     sh '''
                                          rm -f rpm_logs.zip
                                          zip -r rpm_logs.zip /var/log/harvest
                                          '''
                                      archiveArtifacts artifacts: "rpm_logs.zip", fingerprint: true
                                }
                            }
                        }
                    }

                }
                stage('DOCKER') {
                    agent {
                        label "docker"
                    }
                    stages('Test on docker Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install Docker') {
                            steps {
                                sh '''
                                echo "Installing"
                                export PATH=$PATH:/usr/local/go/bin
                                #export BUILD_PATH=$DOCKER
                                export VERSION=$VERSION
                                cd $WORKSPACE/harvest
                                cp -rf $WORKSPACE/harvest/integration/test/harvest.yml .
                                make build
                                ./bin/harvest stop
                                ./bin/harvest generate docker full --port --output harvest-compose.yml
                                docker login -u $DOCKER_USER -p $DOCKER_PWD
                                docker build -f container/onePollerPerContainer/Dockerfile -t rahulguptajss/harvest:latest -t cr.netapp.io/harvest:latest -t ghcr.io/netapp/harvest:latest . --no-cache --build-arg VERSION=$VERSION
                                docker-compose -f prom-stack.yml -f harvest-compose.yml up -d --remove-orphans
                                sleep 1m
                                bash $WORKSPACE/harvest/integration/test/test.sh install_docker
                                '''
                            }
                        }
                        stage('Running Test') {
                            steps {
                                sh """
                                export VERSION=$VERSION
                                bash $WORKSPACE/harvest/integration/test/test.sh regression
                                """

                            }
                            post {
                                always {
                                    sh """
                                        bash $WORKSPACE/harvest/integration/test/test.sh copy_docker_logs
                                        rm -f docker_logs.zip
                                        zip -r docker_logs.zip /var/log/harvest
                                    """
                                    archiveArtifacts artifacts: "docker_logs.zip", fingerprint: true
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def void stopAndRemoveDockers() {
    sh '''
        for container_id in $(docker ps -a -q);do docker stop $container_id;done
        docker system prune --all --force --volumes
    '''
}

def void setupWorkspace() {
 sh '''
    wget --quiet -O go.tar.gz "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz"
    rm -rf /usr/local/go && tar -C /usr/local -xzf ./go.tar.gz
    git clone --single-branch --branch $BRANCH https://github.com/NetApp/harvest.git
    cp /u/mpeg/harvest/harvest_cert.yml $WORKSPACE/harvest/integration/test/
    cp /u/mpeg/harvest/harvest.yml $WORKSPACE/harvest/integration/test/
    ls -ltr $WORKSPACE/harvest/integration/test/
'''
}

def void printNodeInfo() {
        def socket = new DatagramSocket()
        socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
        nodeIp = socket.getLocalAddress().getHostAddress();
        println("The Node IP Address is: ${nodeIp}")
}
