pipeline {

    agent none

    options {
        buildDiscarder logRotator(
                    daysToKeepStr: '16',
                    numToKeepStr: '10'
            )
    }
    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'Version')
        string(name: 'BRANCH',  defaultValue: 'main', description: '[Optional] Branch name to clone. Default (main) ')
        string(name: 'DOCKER',  defaultValue: '', description: 'http url of docker tar build or docker image')
        string(name: 'DOCKER_FIPS',  defaultValue: '', description: 'http url of fips complaint docker tar build or docker image')
        string(name: 'RPM',     defaultValue: '', description: 'http url of rpm file')
        string(name: 'NATIVE',  defaultValue: '', description: 'http url of native tar file')
    }
    environment {
        BUILD_ID="dontKillMe"
        JENKINS_NODE_COOKIE="dontKillMe"
    }

    stages {
        stage('Setup') {
            agent {
                label "master"
            }
            steps {
                sh '''
                echo "Setup"
                '''

                script {
                    def file = readFile('.harvest.env')
                    file.split('\n').each { envLine ->
                        def (key, value) = envLine.tokenize('=')
                        env."${key}" = "${value}"
                    }
                }
            }
        }
        stage('Run Tests') {
            parallel {
                stage('Run NATIVE Tests') {
                    agent {
                        label "native"
                    }
                    stages('Test on Native Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install NATIVE pkg') {
                            steps {
                                sh '''
                                echo "Installing"
                                export BUILD_PATH=$NATIVE
                                export VERSION=$VERSION
                                cp /home/harvestfiles/harvest_targets.yml $WORKSPACE/harvest/container/prometheus/
                                INSTALL_NATIVE=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                '''
                            }
                        }
                        stage('Running Test') {
                            steps {
                                sh '''
                                export VERSION=$VERSION
                                REGRESSION=1 TEST_STAT_PERF=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                '''
                                withCredentials([string(credentialsId: 'PROMETHEUS_URL', variable: 'PROMETHEUS_URL')]) {
                                    sh '''
                                    cd /opt/harvest
                                    ./bin/harvest doctor compareZRMetrics --promUrl $PROMETHEUS_URL
                                    '''
                                }
                            }
                            post {
                                always {
                                     sh '''
                                         STOP=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                         rm -f native_logs.zip
                                         zip -r native_logs.zip /var/log/harvest
                                         '''
                                     archiveArtifacts artifacts: "native_logs.zip", fingerprint: true

                                     withCredentials([string(credentialsId: 'PROMETHEUS_URL', variable: 'PROMETHEUS_URL')]) {
                                         sh '''
                                         cp -r /opt/harvest/bin $WORKSPACE/harvest
                                         cd $WORKSPACE/harvest
                                         bin/harvest generate metrics --poller dc1 --config /home/harvestfiles/harvest.yml --prom-url $PROMETHEUS_URL
                                         '''
                                         }
                                }
                            }
                        }
                    }
                }
                stage('RPM') {
                    agent {
                        label "rhel"
                    }
                    stages('Test on RPM Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install RPM pkg') {
                            steps {
                                sh '''
                                echo "Installing"
                                export BUILD_PATH=http://harvest-jenkins.rtp.openenglab.netapp.com:8080/job/harvest2_0/job/artifcats/lastSuccessfulBuild/artifact/harvest-21.11.0-1.x86_64.rpm
                                export VERSION=$VERSION
                                cp /home/harvestfiles/harvest_targets.yml $WORKSPACE/harvest/container/prometheus/
                                INSTALL_RPM=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                '''
                            }
                        }
                        stage('Upgrade RPM pkg') {
                            steps {
                                sh '''
                                echo "Upgrading"
                                export BUILD_PATH=$RPM
                                export VERSION=$VERSION
                                UPGRADE_RPM=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                sleep 1m
                                '''
                            }
                        }
                    }

                }
                stage('DOCKER') {
                    agent {
                        label "docker"
                    }
                    stages('Test on Docker Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install Docker') {
                            steps {
                                sh '''
                                echo "Installing Docker"
                                curl -O $DOCKER && docker load -i docker_harvest.tar
                                rm -rf $WORKSPACE/docker
                                mkdir $WORKSPACE/docker
                                cd $WORKSPACE/docker
                                cp -rf $WORKSPACE/harvest/integration/test/harvest.yml .
                                docker run --rm \
                                  --entrypoint "bin/harvest" \
                                  --volume "$(pwd):/opt/temp" \
                                  --volume "$(pwd)/harvest.yml:/opt/harvest/harvest.yml" \
                                  ghcr.io/netapp/harvest:latest \
                                  generate docker full \
                                  --output harvest-compose.yml \
                                  --image ghcr.io/netapp/harvest:latest
                                docker compose -f prom-stack.yml -f harvest-compose.yml up -d --remove-orphans
                                sleep 1m
                                INSTALL_DOCKER=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                '''
                            }
                        }
                        stage('Running Test') {
                            steps {
                                sh """
                                export VERSION=$VERSION
                                REGRESSION=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                """

                            }
                            post {
                                always {
                                    sh """
                                        COPY_DOCKER_LOGS=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                        rm -f docker_logs.zip
                                        zip -r docker_logs.zip /var/log/harvest
                                        cd $WORKSPACE/docker
                                        ANALYZE_DOCKER_LOGS=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                        CHECK_METRICS=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                        docker ps -q | xargs docker stop | xargs docker rm --force
                                    """
                                    archiveArtifacts artifacts: "docker_logs.zip", fingerprint: true
                                }
                            }
                        }
                    }
                }
                stage('DOCKER_FIPS') {
                    agent {
                        label "docker"
                    }
                    stages('Test on Docker FIPS Pkg') {
                        stage('Setup') {
                            steps {
                                printNodeInfo()
                                cleanWs()
                                stopAndRemoveDockers()
                                setupWorkspace()
                            }
                        }
                        stage('Install Docker FIPS') {
                            steps {
                                sh '''
                                echo "Installing Docker FIPS"
                                curl -O $DOCKER_FIPS && docker load -i docker_harvest_fips.tar
                                rm -rf $WORKSPACE/docker
                                mkdir $WORKSPACE/docker
                                cd $WORKSPACE/docker
                                cp -rf $WORKSPACE/harvest/integration/test/harvest.yml .
                                docker run --rm \
                                  --entrypoint "bin/harvest" \
                                  --volume "$(pwd):/opt/temp" \
                                  --volume "$(pwd)/harvest.yml:/opt/harvest/harvest.yml" \
                                  ghcr.io/netapp/harvest:latest-fips \
                                  generate docker full \
                                  --output harvest-compose.yml \
                                  --image ghcr.io/netapp/harvest:latest-fips
                                docker compose -f prom-stack.yml -f harvest-compose.yml up -d --remove-orphans
                                sleep 1m
                                INSTALL_DOCKER=1 bash $WORKSPACE/harvest/integration/test/test.sh
                                '''
                            }
                        }
                    }
                }
            }
        }
    }
}

def void stopAndRemoveDockers() {
    sh '''
        for container_id in $(docker ps -a -q);do docker stop $container_id;done
        for container_id in $(docker ps -a -q);do docker rm $container_id;done
        docker system prune --force --volumes
        volumes=$(docker volume ls -qf dangling=true)
        if [ "$volumes" ]; then
            docker volume rm $volumes
        fi
    '''
}

def void setupWorkspace() {
 sh '''
    wget --quiet -O go.tar.gz "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz"
    rm -rf /usr/local/go && tar -C /usr/local -xzf ./go.tar.gz
    git clone --single-branch --branch $BRANCH https://github.com/NetApp/harvest.git
    cp /home/harvestfiles/harvest_cert.yml $WORKSPACE/harvest/integration/test/
    cp /home/harvestfiles/harvest.yml $WORKSPACE/harvest/integration/test/
    cp /home/harvestfiles/harvest_admin.yml $WORKSPACE/harvest/integration/test/
    ls -ltr $WORKSPACE/harvest/integration/test/
'''
}

def void printNodeInfo() {
        def socket = new DatagramSocket()
        socket.connect(InetAddress.getByName("8.8.8.8"), 10002);
        nodeIp = socket.getLocalAddress().getHostAddress();
        println("The Node IP Address is: ${nodeIp}")
}