pipeline {
    agent {label 'buildserver'}

    triggers {
        cron('@midnight')
    }

    parameters {
        string(name: 'VERSION', defaultValue: '', description: '[Optional] RPM Version should match Harvest version with rc or nightly stripped. If not filled default is YY.mm.ddHH. See https://github.com/NetApp/harvest/wiki/Release-Checklist#version-names for details')
        string(name: 'RELEASE', defaultValue: 'nightly', description: '[Optional] Example: nightly (default) See https://github.com/NetApp/harvest/wiki/Release-Checklist#rpm-and-debian-names for details ')
        string(name: 'BRANCH', defaultValue: 'main', description: '[Optional] Branch name to clone. Default (main) ')
		string(name: 'BUILD_DOCKER_HUB_PUBLISH', defaultValue: 'false', description: 'true to publish to docker hub')
		string(name: 'OVERWRITE_LATEST', defaultValue: 'false', description: 'true to overwrite latest tag at docker hub. Works only if BUILD_DOCKER_HUB_PUBLISH is true')
    }

    environment {
        VERSION =sh (returnStdout: true, script: """
        [ -n \"${params.VERSION}\" ] && echo \"${params.VERSION}\" || date +%Y.%m.%d%H | cut -c 3-
        """).trim()
        RELEASE =sh (returnStdout: true, script: """
        echo \"${params.RELEASE}\"
        """).trim()
        BRANCH =sh (returnStdout: true, script: """
        echo \"${params.BRANCH}\"
        """).trim()
		BUILD_DOCKER_HUB_PUBLISH =sh (returnStdout: true, script: """
        echo \"${params.BUILD_DOCKER_HUB_PUBLISH}\"
        """).trim()
		OVERWRITE_LATEST =sh (returnStdout: true, script: """
        echo \"${params.OVERWRITE_LATEST}\"
        """).trim()
        targetParentLocation = "/opt/home/nightly/"
        harvestPath = "harvest"
    }

    stages {

        stage("Initialization") {
            steps {
                buildName "${BUILD_NUMBER}_$BRANCH"
            }
        }

        stage('clean workspace') {
            steps {
                cleanWs()
                sh 'rm -rf $targetParentLocation$VERSION$RELEASE'
            }
        }
        stage('Setup GO') {
            steps {
                sh '''
                wget -O go.tar.gz "https://dl.google.com/go/$(curl https://golang.org/VERSION?m=text).linux-amd64.tar.gz"
                rm -rf /usr/local/go && tar -C /usr/local -xzf go.tar.gz
                '''
            }
        }

        stage('Download Prerequisites') {
            steps {
                sh '''
               apt-get update
               apt-get install -y rpm
               apt-get install -y net-tools
               apt install -y git-all
               apt-get install -y build-essential
                '''
            }
        }

        stage('Git Clone Harvest') {
            steps {
               sh '''
               git clone --single-branch --branch $BRANCH https://github.com/NetApp/harvest.git
                '''
            }
        }

        stage('Build Harvest RPM/DEB') {
            steps {
               sh '''
               cd $harvestPath
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               rm -rf ./dist
               export PATH=$PATH:/usr/local/go/bin
               rm -rf /root/rpmbuild/
               mkdir -p $targetLocation
               ./package.sh deb x86_64 $VERSION $RELEASE
               cp -RT ./dist/$VERSION-$RELEASE/ $targetLocation
               ./package.sh rpm x86_64 $VERSION $RELEASE
               cp -RT ./dist/$VERSION-$RELEASE/x86_64/  $targetLocation
                '''
            }
        }

        stage('Build Harvest Tar gz') {
            steps {
               sh '''
               cd $harvestPath
               export PATH=$PATH:/usr/local/go/bin
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               rm -rf dist
               make package VERSION=$VERSION RELEASE=$RELEASE
               cp -RT ./dist/ $targetLocation
                '''
            }
        }
       stage('Build Docker Image and Publish') {
                when {
                  expression {
                    return env.BUILD_DOCKER_HUB_PUBLISH == 'true';
                  }
                }
                steps {
                  withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
                    sh '''
                    cd $harvestPath
                    docker build -f docker/onePollerPerContainer/Dockerfile -t rahulguptajss/harvest:latest -t rahulguptajss/harvest:$VERSION-$RELEASE . --no-cache
                    docker login
                    docker push rahulguptajss/harvest:$VERSION-$RELEASE
                    '''
					script {
					if (OVERWRITE_LATEST == 'true') {
					  sh 'docker push rahulguptajss/harvest:latest'
					}
					}
                  }
                }
              }

    }

    post {
        always {
            dir("$targetParentLocation$VERSION-$RELEASE-$BRANCH") {
                archiveArtifacts artifacts: '**', fingerprint: true
            }
        }
    }

}
