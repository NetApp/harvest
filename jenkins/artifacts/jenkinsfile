pipeline {
    agent {label 'buildserver'}

    parameters {
        string(name: 'VERSION', defaultValue: '', description: '[Optional] RPM Version should match Harvest version with rc or nightly stripped. If not filled default is YY.mm.ddHH. See https://github.com/NetApp/harvest/wiki/Release-Checklist#version-names for details')
        string(name: 'RELEASE', defaultValue: 'nightly', description: '[Optional] Example: nightly (default) See https://github.com/NetApp/harvest-private/wiki/Release-Checklist#rpm-and-debian-names for details ')
        string(name: 'BRANCH', defaultValue: 'main', description: '[Optional] Branch name to clone. Default (main) ')
		string(name: 'ASUP_MAKE_TARGET', defaultValue: 'production', description: 'make target for AutoSupport binary build|production')
		string(name: 'DOCKER_PUBLISH', defaultValue: 'false', description: 'true to publish to dockerhub')
		string(name: 'RUN_TEST', defaultValue: 'true', description: 'false to skip test')
		string(name: 'OVERWRITE_DOCKER_LATEST_TAG', defaultValue: 'false', description: 'true to overwrite latest tag at dockerhub. Works only if DOCKER_PUBLISH is true')
		string(name: 'RUN_TRIVY_SCAN', defaultValue: 'false', description: 'true to run Trivy image scan')
    }

    environment {
        GIT_TOKEN = credentials('GIT_TOKEN')
        VERSION =sh (returnStdout: true, script: """
        [ -n \"${params.VERSION}\" ] && echo \"${params.VERSION}\" || date +%Y.%m.%d | cut -c 3-
        """).trim()
        RELEASE =sh (returnStdout: true, script: """
        echo \"${params.RELEASE}\"
        """).trim()
        BRANCH = getBranchName(env.CHANGE_BRANCH, params.BRANCH)
		ASUP_MAKE_TARGET =sh (returnStdout: true, script: """
        echo \"${params.ASUP_MAKE_TARGET}\"
        """).trim()
		DOCKER_PUBLISH =sh (returnStdout: true, script: """
        echo \"${params.DOCKER_PUBLISH}\"
        """).trim()
        OVERWRITE_DOCKER_LATEST_TAG =sh (returnStdout: true, script: """
        echo \"${params.OVERWRITE_DOCKER_LATEST_TAG}\"
        """).trim()
        targetParentLocation = "/opt/home/nightly/"
        harvestPath = "harvest"
        imageName = "rahulguptajss/harvest"
        ghcrImage = "ghcr.io/netapp/harvest"
        DOCKERHUB_USERNAME = "rahulguptajss"
        jfrogImagePrefix = "netappdownloads.jfrog.io/oss-docker-harvest-production/harvest"
        jfrogRepo = "netappdownloads.jfrog.io"
        COMMIT_ID = sh(returnStdout: true, script: 'git rev-parse HEAD')
    }

    stages {
        stage('Docker Login') {
            steps {
                withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
                    sh 'docker login'
                }
            }
        }

        stage("Initialization") {
            steps {
                buildName "${BUILD_NUMBER}_$BRANCH"
                script {
                    currentStage = 'Initialization'
                }
            }
        }

        stage('clean system') {
            steps {
                stopAndRemoveDockers()
                script {
                    currentStage = 'clean system'
                }
            }
        }

        stage('Download Prerequisites') {
            steps {
                sh '''
               apt-get install -y rpm
               apt-get install -y net-tools
               apt install -y git-all
               apt-get install -y build-essential
               apt install -y python3-pip
               pip install mkdocs==1.5.3
               pip install mike==1.1.2
               pip install mkdocs-material-extensions==1.3
               pip install mkdocs-material==9.5.6
               pip install mkdocs-macros-plugin==0.7.0
                '''
                script {
                    currentStage = 'Download Prerequisites'
                }
            }
        }

        stage('Git Clone Harvest') {
            steps {
               cleanWs()
               sh '''
                git clone --single-branch --branch $BRANCH https://github.com/NetApp/harvest.git .
                '''

                script {
                    def file = readFile('.harvest.env')
                    currentStage = 'Git Clone Harvest'
                    file.split('\n').each { envLine ->
                        def (key, value) = envLine.tokenize('=')
                        env."${key}" = "${value}"
                    }
                }
            }
        }

        stage('Setup GO') {
            steps {
                sh '''
                wget -q -O go.tar.gz "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz"
                rm -rf /usr/local/go && tar -C /usr/local -xzf go.tar.gz
                '''
                script {
                    currentStage = 'Setup GO'
                }
            }
        }

        stage('Build Harvest RPM/DEB') {
            steps {
               sh '''
               #cd $harvestPath
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               rm -rf ./dist
               export PATH=$PATH:/usr/local/go/bin
               rm -rf /root/rpmbuild/
               mkdir -p $targetLocation
               ./package.sh deb x86_64 $VERSION $RELEASE $ASUP_MAKE_TARGET $GIT_TOKEN
               cp -RT ./dist/$VERSION-$RELEASE/ $targetLocation
               ./package.sh rpm x86_64 $VERSION $RELEASE $ASUP_MAKE_TARGET $GIT_TOKEN
               cp -RT ./dist/$VERSION-$RELEASE/x86_64/  $targetLocation
                '''
                script {
                    currentStage = 'Build Harvest RPM/DEB'
                }
            }
        }

        stage('Build Harvest Tar gz') {
            steps {
               sh '''
               #cd $harvestPath
               export PATH=$PATH:/usr/local/go/bin
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               rm -rf dist
               make build asup test dist-tar VERSION=$VERSION RELEASE=$RELEASE ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET GIT_TOKEN=$GIT_TOKEN
               cp -RT ./dist/ $targetLocation
               cp ./autosupport/asup $targetLocation/asup_linux_amd64
                '''
                script {
                    currentStage = 'Build Harvest Tar gz'
                }
            }
        }

        stage('Build Autosupport Binary') {
           steps {
               sh '''
               #cd $harvestPath
               rm -rf ./autosupport/asup
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               docker run --rm -v "$PWD":/$harvestPath -w /$harvestPath golang:${GO_VERSION} sh -c "export PATH=$PATH:/usr/local/go/bin && make asup VERSION=$VERSION RELEASE=$RELEASE ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET GIT_TOKEN=$GIT_TOKEN"
               cp ./autosupport/asup $targetLocation/asup_linux_amd64
                '''
                script {
                    currentStage = 'Build Autosupport Binary'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
                    script {
                        // Write the GIT_TOKEN to a temporary file
                        def gitTokenFile = "${env.WORKSPACE}/git_token"
                        currentStage = 'Build Docker Images'
                        writeFile file: gitTokenFile, text: env.GIT_TOKEN

                        withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
                            sh '''
                            targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
                            docker login
                            docker build --secret id=git_token,src=${gitTokenFile} -f container/onePollerPerContainer/Dockerfile --build-arg GO_VERSION=${GO_VERSION} --build-arg VERSION=$VERSION --build-arg RELEASE=$RELEASE --build-arg ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET -t ${imageName}:latest -t ${imageName}:$VERSION-$RELEASE -t ${jfrogImagePrefix}:latest -t ${jfrogImagePrefix}:$VERSION-$RELEASE -t ${ghcrImage}:latest -t ${ghcrImage}:$VERSION-$RELEASE . --no-cache
                            docker build --secret id=git_token,src=${gitTokenFile} -f container/onePollerPerContainer/Dockerfile --build-arg GO_VERSION=${GO_VERSION} --build-arg VERSION=$VERSION --build-arg RELEASE=$RELEASE --build-arg ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET --build-arg GODEBUG=fips140=on -t ${imageName}:latest-fips -t ${imageName}:$VERSION-$RELEASE-fips -t ${jfrogImagePrefix}:latest-fips -t ${jfrogImagePrefix}:$VERSION-$RELEASE-fips -t ${ghcrImage}:latest-fips -t ${ghcrImage}:$VERSION-$RELEASE-fips . --no-cache
                            docker save -o ${targetLocation}/docker_harvest.tar ${ghcrImage}:latest
                            docker save -o ${targetLocation}/docker_harvest_fips.tar ${ghcrImage}:latest-fips
                            '''
                        }
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            when {
                expression {
                    return params.RUN_TRIVY_SCAN == 'true';
                }
            }
            steps {
                script {
                    currentStage = 'Trivy Image Scan'
                }
                sh '''
                curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
                export PATH=/usr/local/bin:$PATH
                trivy image --db-repository public.ecr.aws/aquasecurity/trivy-db --exit-code 1 ${ghcrImage}:latest
                trivy image --db-repository public.ecr.aws/aquasecurity/trivy-db --exit-code 1 ${ghcrImage}:latest-fips
                '''
            }
        }

         stage('Publish builds locally'){
          steps {
              script {
                  currentStage = 'Publish builds locally'
              }
              dir("$targetParentLocation$VERSION-$RELEASE-$BRANCH") {
                  archiveArtifacts artifacts: '**', fingerprint: true
              }
          }
      }

        stage('Run Tests') {
            when {
                expression {
                    return params.RUN_TEST == 'true';
                }
            }
            steps {
                script {
                    currentStage = 'Run Tests'
                    dockerBuild = "${BUILD_URL}/artifact/docker_harvest.tar"
                    dockerBuildFips = "${BUILD_URL}/artifact/docker_harvest_fips.tar"
                    nativeBuild = "${BUILD_URL}/artifact/harvest-${VERSION}-${RELEASE}_linux_amd64.tar.gz"
                    rpmBuild    = "${BUILD_URL}/artifact/harvest-${VERSION}-${RELEASE}.x86_64.rpm"
                    build job: 'harvest2_0/smoke', parameters: [string(name: 'VERSION', value: "${VERSION}"), string(name: 'BRANCH', value: "${BRANCH}"), string(name: 'NATIVE', value: "${nativeBuild}"),  string(name: 'RPM', value: "${rpmBuild}"), string(name: 'DOCKER', value: "${dockerBuild}"), string(name: 'DOCKER_FIPS', value: "${dockerBuildFips}")]
                }
            }
        }

        stage('Test and Generate Harvest Metrics') {
            steps {
                script {
                    currentStage = 'Test and Generate Harvest Metrics'
                    def result = sh(script: 'bin/harvest generate metrics --poller dc1 --config /home/harvestfiles/harvest.yml', returnStatus: true)
                    if (result != 0) {
                        error("Generate Harvest metrics command failed.")
                    }
                }
            }
        }

        stage('Docker Image Publish') {
            when {
                expression {
                    return env.DOCKER_PUBLISH == 'true';
                }
            }
            steps {
                withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
                    sh '''
                    docker login
                    docker push ${imageName}:$VERSION-$RELEASE-fips
                    docker push ${imageName}:$VERSION-$RELEASE
                    '''
                    script {
                        currentStage = 'Docker Image Publish'
                        if (OVERWRITE_DOCKER_LATEST_TAG == 'true') {
                            sh '''
                            docker push ${imageName}:latest-fips
                            docker push ${imageName}:latest
                            '''
                        }
                    }
                }
                sh '''
                echo $GIT_TOKEN | docker login ghcr.io -u $DOCKERHUB_USERNAME --password-stdin
                docker push ${ghcrImage}:$VERSION-$RELEASE-fips
                docker push ${ghcrImage}:$VERSION-$RELEASE
                '''
                script {
                    currentStage = 'Docker Image Publish'
                    if (OVERWRITE_DOCKER_LATEST_TAG == 'true') {
                        sh '''
                        docker push ${ghcrImage}:latest-fips
                        docker push ${ghcrImage}:latest
                        '''
                    }
                }
                withCredentials([usernamePassword(credentialsId: 'Jfrog', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh '''
                    docker login --username=$username --password=$password ${jfrogRepo}
                    docker push ${jfrogImagePrefix}:$VERSION-$RELEASE-fips
                    docker push ${jfrogImagePrefix}:$VERSION-$RELEASE
                    '''
                    script {
                        currentStage = 'Docker Image Publish'
                        if (OVERWRITE_DOCKER_LATEST_TAG == 'true') {
                            sh '''
                            docker push ${jfrogImagePrefix}:latest-fips
                            docker push ${jfrogImagePrefix}:latest
                            '''
                        }
                    }
                }
            }
        }

        stage('Publish Nightly Build to GitHub') {
            when {
                expression {
                    return params.RELEASE == 'nightly' && env.BRANCH == 'main' && params.ASUP_MAKE_TARGET == 'production'
                }
            }
            steps {
                withCredentials([string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
                    script {
                        // Write the GIT_TOKEN to a temporary file
                        def gitTokenFile = "${env.WORKSPACE}/git_token"
                        currentStage = 'Publish Nightly Build to GitHub'
                        writeFile file: gitTokenFile, text: env.GIT_TOKEN

                        sh '''
                        targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
                        wget -q -O /opt/home/gh.tar.gz "https://github.com/cli/cli/releases/download/v2.8.0/gh_2.8.0_linux_386.tar.gz"
                        tar -C /opt/home -xzf /opt/home/gh.tar.gz
                        echo $GIT_TOKEN > mytoken.txt
                        /opt/home/gh_2.8.0_linux_386/bin/gh auth login --with-token < mytoken.txt
                        /opt/home/gh_2.8.0_linux_386/bin/gh release view nightly && /opt/home/gh_2.8.0_linux_386/bin/gh release delete nightly || true
                        if [ $(git tag -l nightly) ]; then
                            git push https://$GIT_TOKEN@github.com/NetApp/harvest.git --delete nightly
                        fi
                        /opt/home/gh_2.8.0_linux_386/bin/gh release create nightly $targetLocation/*.rpm $targetLocation/*.deb $targetLocation/*.gz --notes "Nightly builds may include bugs and other issues. You might want to use the stable releases instead." --title "Harvest Nightly Release" --prerelease --target main
                        docker build --secret id=git_token,src=${gitTokenFile} -f container/onePollerPerContainer/Dockerfile --build-arg GO_VERSION=${GO_VERSION} --build-arg VERSION=$VERSION --build-arg RELEASE=$RELEASE --build-arg ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET -t ${imageName}:latest -t ${imageName}:nightly -t ${jfrogImagePrefix}:latest -t ${jfrogImagePrefix}:nightly -t ${ghcrImage}:latest -t ${ghcrImage}:nightly . --no-cache
                        docker build --secret id=git_token,src=${gitTokenFile} -f container/onePollerPerContainer/Dockerfile --build-arg GO_VERSION=${GO_VERSION} --build-arg VERSION=$VERSION --build-arg RELEASE=$RELEASE --build-arg ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET --build-arg GODEBUG=fips140=on -t ${imageName}:latest-fips -t ${imageName}:nightly-fips -t ${jfrogImagePrefix}:latest-fips -t ${jfrogImagePrefix}:nightly-fips -t ${ghcrImage}:latest-fips -t ${ghcrImage}:nightly-fips . --no-cache
                        echo $GIT_TOKEN | docker login ghcr.io -u $DOCKERHUB_USERNAME --password-stdin
                        docker push ${ghcrImage}:nightly-fips
                        docker push ${ghcrImage}:nightly
                        # Add a dummy user/email for mike deploy to work
                        git config user.name harvest
                        git config user.email harvest
                        git fetch origin gh-pages:gh-pages
                        mike deploy -r https://$GIT_TOKEN@github.com/NetApp/harvest.git --push --update-aliases nightly
                        '''
                        withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
                            sh '''
                            docker login
                            docker push ${imageName}:nightly-fips
                            docker push ${imageName}:nightly
                            '''
                        }
                        withCredentials([usernamePassword(credentialsId: 'Jfrog', passwordVariable: 'password', usernameVariable: 'username')]) {
                            sh '''
                            docker login --username=$username --password=$password ${jfrogRepo}
                            docker push ${jfrogImagePrefix}:nightly-fips
                            docker push ${jfrogImagePrefix}:nightly
                            '''
                        }
                    }
                }
            }
        }

    }

    post {
        failure {
            sendNotification("FAILED")
        }
        success {
            sendNotification("SUCCESS")
        }
        aborted {
             sendNotification("Aborted")
        }
    }
}

def void stopAndRemoveDockers() {
    sh '''
        rm -rf /opt/home/nightly/
        mkdir -p /opt/home/nightly/
        for container_id in $(docker ps -a -q);do docker stop $container_id;done
        docker system prune --force --volumes
        volumes=$(docker volume ls -qf dangling=true)
        if [ "$volumes" ]; then
            docker volume rm $volumes
        fi
    '''
}

def getBranchName(gitBranchName, paramBranchName) {
    if(gitBranchName!=null) {
        gitBranchName = gitBranchName.replace('origin/', '')
        if (gitBranchName?.trim() && gitBranchName != "main") {
            return gitBranchName
        }
    }else {
        return paramBranchName
    }
}

def void sendNotification(def status) {
    def harvestProjectName = 'Harvest'
    def msWorkflowUrl = "${TEAM_HOOK}"
    def prName = env.CHANGE_TITLE ?: "N/A"
    def prNo = env.CHANGE_ID ?: "N/A"
    def buildState = status
    def PrCommitter = env.CHANGE_AUTHOR_DISPLAY_NAME ?: env.CHANGE_AUTHOR ?: "N/A"
    def startTime = new Date(currentBuild.startTimeInMillis + currentBuild.duration).format("yyyy-MM-dd HH:mm:ss")
    def jenkinsImageUrl = "https://www.jenkins.io/images/logos/jenkins/jenkins.png"
    def statusMessage = "Jenkins Build SUCCESS"
    def statusColor = "Good"
    def stage = "All Stages Passed"

    if (buildState == 'FAILED') {
        jenkinsImageUrl = "https://www.jenkins.io/images/logos/fire/fire.png"
        statusMessage = "Jenkins Build FAIL"
        statusColor = "warning"
        stage = "${currentStage}"
    }

    if (buildState == 'Aborted') {
        jenkinsImageUrl = "https://www.jenkins.io/images/logos/fire/fire.png"
        statusMessage = "Jenkins Build Aborted"
        statusColor = "warning"
        stage = "${currentStage}"
    }

    def payloadData = """
    {
        "type": "message",
        "attachments": [
            {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                    "\$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                    "type": "AdaptiveCard",
                    "version": "1.4",
                    "body": [
                        {
                            "type": "TextBlock",
                            "size": "Medium",
                            "weight": "Bolder",
                            "text": "Build Notification"
                        },
                        {
                            "type": "ColumnSet",
                            "columns": [
                                {
                                    "type": "Column",
                                    "items": [
                                        {
                                            "type": "Image",
                                            "style": "Person",
                                            "url": "${jenkinsImageUrl}",
                                            "altText": "Jenkins Logo",
                                            "size": "Medium",
                                            "height": "50px",
                                            "width": "48px"
                                        }
                                    ],
                                    "width": "auto"
                                },
                                {
                                    "type": "Column",
                                    "items": [
                                        {
                                            "type": "TextBlock",
                                            "weight": "Bolder",
                                            "text": "${statusMessage}",
                                            "color": "${statusColor}",
                                            "wrap": true,
                                            "size": "ExtraLarge",
                                            "isSubtle": true
                                        },
                                        {
                                            "type": "TextBlock",
                                            "spacing": "None",
                                            "text": "Build time: ${startTime}",
                                            "wrap": true,
                                            "isSubtle": true
                                        }
                                    ],
                                    "width": "stretch"
                                }
                            ]
                        },
                        {
                            "type": "FactSet",
                            "facts": [
                                {
                                    "title": "Application Name:",
                                    "value": "${harvestProjectName}"
                                },
                                {
                                    "title": "Stage:",
                                    "value": "${stage}"
                                },
                                {
                                    "title": "Job Name:",
                                    "value": "${env.JOB_BASE_NAME}"
                                },
                                {
                                    "title": "Build Number:",
                                    "value": "${env.BUILD_NUMBER}"
                                },
                                {
                                    "title": "PR Number:",
                                    "value": "${prNo}"
                                },
                                {
                                    "title": "Commit Author:",
                                    "value": "${PrCommitter}"
                                }
                            ],
                            "spacing": "Medium",
                            "separator": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "${prName}",
                            "wrap": true,
                            "spacing": "Medium",
                            "separator": true,
                            "maxLines": 2,
                            "size": "Small",
                            "fontType": "Monospace",
                            "weight": "Bolder",
                            "color": "Accent"
                        }
                    ],
                    "actions": [
                        {
                            "type": "Action.OpenUrl",
                            "title": "View ${harvestProjectName} Build",
                            "url": "${env.BUILD_URL}",
                            "iconUrl": "https://i.ibb.co/Ks2JKfG/cloudbees-logo-icon-168396.png"
                        }
                    ],
                    "rtl": false
                }
            }
        ]
    }
    """

    // This POST call would trigger notification to MS Teams channel
    httpRequest(
        httpMode: 'POST',
        acceptType: 'APPLICATION_JSON',
        contentType: 'APPLICATION_JSON',
        url: msWorkflowUrl,
        requestBody: payloadData
    )
}

def void updateStatus(def commitId, def statusMsg, def buildUrl, def description, def gitToken,
        def jobName) {
    println("Job Name --> ${jobName}")
    if(jobName.trim().startsWith("harvest/PR-")) {
        println("Ignore GitHub check status update")
        return
    }
    def post = (HttpURLConnection) new URL("https://api.github.com/repos/NetApp/harvest/statuses/${commitId}").openConnection();
    def message = '{ "state" :  "'+statusMsg+'", "target_url": "'+buildUrl+'", "description": "'+description+'", "context" : "Integration test result"  }'
    post.requestMethod = 'POST'
    post.setDoInput(true);
    post.setDoOutput(true);
    post.setRequestProperty("Accept", "application/vnd.github.v3+json")
    post.setRequestProperty("Authorization", "token ${gitToken}")
    post.getOutputStream().write(message.getBytes("UTF-8"));
    println(new String(post.getOutputStream().toByteArray(), "UTF-8"));
    def postRC = post.getResponseCode();
    println(postRC);
    if(postRC.equals(201)) {
        println(post.getInputStream().getText());
    }else {
        throw new RuntimeException("Failed to update GitHub Check "+post.getInputStream().getText())
    }
}