pipeline {
    agent {label 'buildserver'}

    triggers {
        cron('@midnight')
    }

    parameters {
        string(name: 'VERSION', defaultValue: '', description: '[Optional] RPM Version should match Harvest version with rc or nightly stripped. If not filled default is YY.mm.ddHH. See https://github.com/NetApp/harvest/wiki/Release-Checklist#version-names for details')
        string(name: 'RELEASE', defaultValue: 'nightly', description: '[Optional] Example: nightly (default) See https://github.com/NetApp/harvest-private/wiki/Release-Checklist#rpm-and-debian-names for details ')
        string(name: 'BRANCH', defaultValue: 'main', description: '[Optional] Branch name to clone. Default (main) ')
		string(name: 'ASUP_MAKE_TARGET', defaultValue: 'build', description: 'make target for AutoSupport binary build|production')
		string(name: 'DOCKER_PUBLISH', defaultValue: 'false', description: 'true to publish to dockerhub')
		string(name: 'RUN_TEST', defaultValue: 'true', description: 'false to skip test')
		string(name: 'OVERWRITE_DOCKER_LATEST_TAG', defaultValue: 'false', description: 'true to overwrite latest tag at dockerhub. Works only if DOCKER_PUBLISH is true')
    }

    environment {
        GIT_TOKEN = credentials('GIT_TOKEN')
        VERSION =sh (returnStdout: true, script: """
        [ -n \"${params.VERSION}\" ] && echo \"${params.VERSION}\" || date +%Y.%m.%d%H | cut -c 3-
        """).trim()
        RELEASE =sh (returnStdout: true, script: """
        echo \"${params.RELEASE}\"
        """).trim()
        BRANCH = getBranchName(env.GIT_BRANCH, params.BRANCH)
		ASUP_MAKE_TARGET =sh (returnStdout: true, script: """
        echo \"${params.ASUP_MAKE_TARGET}\"
        """).trim()
		DOCKER_PUBLISH =sh (returnStdout: true, script: """
        echo \"${params.DOCKER_PUBLISH}\"
        """).trim()
        OVERWRITE_DOCKER_LATEST_TAG =sh (returnStdout: true, script: """
        echo \"${params.OVERWRITE_DOCKER_LATEST_TAG}\"
        """).trim()
        targetParentLocation = "/opt/home/nightly/"
        harvestPath = "harvest"
        imageName = "rahulguptajss/harvest"
        COMMIT_ID = sh(returnStdout: true, script: 'git rev-parse HEAD')
        GO_VERSION = 1.17
    }

    stages {

        stage("Initialization") {
            steps {
                buildName "${BUILD_NUMBER}_$BRANCH"
            }
        }

        stage('clean workspace') {
            steps {
                cleanWs()
                stopAndRemoveDockers()
            }
        }
        stage('Setup GO') {
            steps {
                sh '''
                wget -q -O go.tar.gz "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"
                rm -rf /usr/local/go && tar -C /usr/local -xzf go.tar.gz
                '''
                updateStatus(env.COMMIT_ID,"pending",env.BUILD_URL, "Harvest CI is running", env.GIT_REPO_STATUS_TOKEN, env.JOB_NAME)
            }
        }

        stage('Download Prerequisites') {
            steps {
                sh '''
               apt-get update
               apt-get install -y rpm
               apt-get install -y net-tools
               apt install -y git-all
               apt-get install -y build-essential
                '''
            }
        }

        stage('Git Clone Harvest') {
            steps {
               sh '''
               git clone --single-branch --branch $BRANCH https://github.com/NetApp/harvest.git
                '''
            }
        }

        stage('Build Harvest RPM/DEB') {
            steps {
               sh '''
               cd $harvestPath
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               rm -rf ./dist
               export PATH=$PATH:/usr/local/go/bin
               rm -rf /root/rpmbuild/
               mkdir -p $targetLocation
               ./package.sh deb x86_64 $VERSION $RELEASE $ASUP_MAKE_TARGET $GIT_TOKEN
               cp -RT ./dist/$VERSION-$RELEASE/ $targetLocation
               ./package.sh rpm x86_64 $VERSION $RELEASE $ASUP_MAKE_TARGET $GIT_TOKEN
               cp -RT ./dist/$VERSION-$RELEASE/x86_64/  $targetLocation
                '''
            }
        }

        stage('Build Harvest Tar gz') {
            steps {
               sh '''
               cd $harvestPath
               export PATH=$PATH:/usr/local/go/bin
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               rm -rf dist
               make build asup test dist-tar VERSION=$VERSION RELEASE=$RELEASE ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET GIT_TOKEN=$GIT_TOKEN
               cp -RT ./dist/ $targetLocation
               cp ./autosupport/asup $targetLocation/asup_linux_amd64
                '''
            }
        }

        stage('Build alpine Autosupport binary') {
           steps {
               sh '''
               cd $harvestPath
               rm -rf ./autosupport/asup
               targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
               docker run --rm -v "$PWD":/$harvestPath -w /$harvestPath golang:${GO_VERSION}-alpine sh -c "apk add --virtual build-dependencies build-base gcc make bash git && export PATH=$PATH:/usr/local/go/bin && make asup VERSION=$VERSION RELEASE=$RELEASE ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET GIT_TOKEN=$GIT_TOKEN"
               cp ./autosupport/asup $targetLocation/asup_alpine_amd64
                '''
            }
      }

        stage('Build Docker Image ') {
                steps {
                  withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
                    sh '''
                    cd $harvestPath
                    targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
                    docker login
                    docker build -f docker/onePollerPerContainer/Dockerfile --build-arg VERSION=$VERSION --build-arg RELEASE=$RELEASE --build-arg ASUP_MAKE_TARGET=$ASUP_MAKE_TARGET --build-arg GIT_TOKEN=$GIT_TOKEN  -t ${imageName}:latest -t ${imageName}:$VERSION-$RELEASE . --no-cache
                    docker save -o ${targetLocation}/docker_harvest.tar ${imageName}:latest
                    '''
                  }
                }
              }

         stage('Publish builds locally'){
          steps {
              dir("$targetParentLocation$VERSION-$RELEASE-$BRANCH") {
                  archiveArtifacts artifacts: '**', fingerprint: true
              }
          }
      }
      stage('Docker Image Publish') {
          when {
            expression {
              return env.DOCKER_PUBLISH == 'true';
            }
          }
          steps {
            withDockerRegistry([credentialsId: "DockerHub", url: ""]) {
              sh '''
              docker login
              docker push ${imageName}:$VERSION-$RELEASE
              '''
             script {
             if (OVERWRITE_DOCKER_LATEST_TAG == 'true') {
               sh 'docker push ${imageName}:latest'
             }
             }
            }
          }
      }

      stage('Run Tests') {
        when {
            expression {
                return params.RUN_TEST == 'true';
            }
        }
        steps {
            script {
                dockerBuild = "${BUILD_URL}/artifact/docker_harvest.tar"
                nativeBuild = "${BUILD_URL}/artifact/harvest-${VERSION}-${RELEASE}_linux_amd64.tar.gz"
                rpmBuild    = "${BUILD_URL}/artifact/harvest-${VERSION}-${RELEASE}.x86_64.rpm"
                build job: 'harvest2_0/smoke', parameters: [string(name: 'BRANCH', value: "${BRANCH}"), string(name: 'NATIVE', value: "${nativeBuild}"),  string(name: 'RPM', value: "${rpmBuild}"), string(name: 'DOCKER', value: "${dockerBuild}")]
            }
        }
      }
    }
    post {
        failure {
            updateStatus(env.COMMIT_ID,"failure",env.BUILD_URL , "Harvest CI has completed", env.GIT_REPO_STATUS_TOKEN, env.JOB_NAME)
        }
        success {
            updateStatus(env.COMMIT_ID,"success",env.BUILD_URL, "Harvest CI has completed", env.GIT_REPO_STATUS_TOKEN, env.JOB_NAME)
        }
        aborted {
            updateStatus(env.COMMIT_ID,"error",env.BUILD_URL, "Harvest CI has been aborted", env.GIT_REPO_STATUS_TOKEN, env.JOB_NAME)
        }
    }
}

def void stopAndRemoveDockers() {
    sh '''
        rm -rf /opt/home/nightly/
        mkdir -p /opt/home/nightly/
        for container_id in $(docker ps -a -q);do docker stop $container_id && docker rm -f $container_id;done
        for image_id in $(docker images -q);do docker rmi -f $image_id;done
        for volume_id in $(docker volume ls -q); do docker volume rm -f $volume_id;done
    '''
}


def getBranchName(gitBranchName, paramBranchName) {
    gitBranchName = gitBranchName.replace('origin/', '')
    if (gitBranchName?.trim() && gitBranchName != "main") {
        return gitBranchName
    }
    return paramBranchName
}

def void updateStatus(def commitId, def statusMsg, def buildUrl, def description, def gitToken,
        def jobName) {
    println("Job Name --> ${jobName}")
    if(jobName.trim().startsWith("harvest/PR-")) {
        println("Ignore GitHub check status update")
        return
    }
    def post = (HttpURLConnection) new URL("https://api.github.com/repos/NetApp/harvest/statuses/${commitId}").openConnection();
    def message = '{ "state" :  "'+statusMsg+'", "target_url": "'+buildUrl+'", "description": "'+description+'", "context" : "Integration test result"  }'
    post.requestMethod = 'POST'
    post.setDoInput(true);
    post.setDoOutput(true);
    post.setRequestProperty("Accept", "application/vnd.github.v3+json")
    post.setRequestProperty("Authorization", "token ${gitToken}")
    post.getOutputStream().write(message.getBytes("UTF-8"));
    println(new String(post.getOutputStream().toByteArray(), "UTF-8"));
    def postRC = post.getResponseCode();
    println(postRC);
    if(postRC.equals(201)) {
        println(post.getInputStream().getText());
    }else {
        throw new RuntimeException("Failed to update GitHub Check "+post.getInputStream().getText())
    }
}