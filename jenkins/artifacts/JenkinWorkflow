pipeline {
    agent {label 'buildserver'}

    environment {
        targetParentLocation = "/opt/home/nightly/"
        harvestPath = "harvest"
        imageName = "rahulguptajss/harvest"
        VERSION="1"
        RELEASE="2"
    }

    stages {

        stage('clean workspace') {
            steps {
                cleanWs()
                sh 'rm -rf $targetParentLocation$VERSION$RELEASE'

            }
        }
        stage('Setup GO') {
            steps {
                sh '''
                wget -q -O go.tar.gz "https://dl.google.com/go/$(curl https://golang.org/VERSION?m=text).linux-amd64.tar.gz"
                rm -rf /usr/local/go && tar -C /usr/local -xzf go.tar.gz
                '''
            }
        }

        stage('Download Prerequisites') {
            steps {
                sh '''
               apt-get update
               apt-get install -y rpm
               apt-get install -y net-tools
               apt install -y git-all
               apt-get install -y build-essential
                '''
            }
        }

        stage('Git Clone Harvest') {
            steps {
               sh '''
                git clone --single-branch --branch $GIT_BRANCH https://github.com/NetApp/harvest.git
                #git clone --single-branch --branch main https://github.com/NetApp/harvest.git
                '''
            }
        }
        stage('Build'){
            parallel {
                stage('Build Tar gz') {
                    steps {
                       sh '''
                       cd $harvestPath
                       export PATH=$PATH:/usr/local/go/bin
                       targetLocation=$targetParentLocation$VERSION-$RELEASE
                       rm -rf dist
                       make package VERSION=$VERSION RELEASE=$RELEASE
                       #cp ./dist/*tar.gz ./dist/harvest.tar.gz
                        '''
                    }
                }
                stage('Build RPM/DEB') {
                    steps {
                       sh '''
                       cd $harvestPath
                       targetLocation=$targetParentLocation$VERSION-$RELEASE-$BRANCH
                       rm -rf ./dist
                       export PATH=$PATH:/usr/local/go/bin
                       rm -rf /root/rpmbuild/
                       mkdir -p $targetLocation
                       #./package.sh deb x86_64 $VERSION $RELEASE
                       #cp -RT ./dist/$VERSION-$RELEASE/ $targetLocation
                       ./package.sh rpm x86_64 $VERSION $RELEASE
                       #cp -RT ./dist/$VERSION-$RELEASE/x86_64/*.rpm  ./dist/harvest.rpm
                        '''
                    }
                }
                stage('Build Docker') {
                    steps {
                       sh '''
                       cd $harvestPath
                       docker login -u $DOCKER_USER -p $DOCKER_PWD
                       docker rmi -f $(docker images -q)
                       docker build -f docker/onePollerPerContainer/Dockerfile -t $imageName:latest . --no-cache
                       docker save -o ./dist/docker_harvest.tar $imageName:latest
                        '''
                    }
                }

            }
        }
        stage('Publish builds locally'){
            steps {
                dir("./${harvestPath}/dist") {
                    archiveArtifacts artifacts: '**', fingerprint: true
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    dockerBuild = "${BUILD_URL}/artifact/docker_harvest.tar"
                    nativeBuild = "${BUILD_URL}/artifact/harvest-1-2_linux_amd64.tar.gz"
                    rpmBuild    = "${BUILD_URL}/artifact/1-2/x86_64/harvest-1-2.x86_64.rpm"
                    build job: 'harvest2_0/smoke', parameters: [string(name: 'BRANCH', value: "${GIT_BRANCH}"), string(name: 'NATIVE', value: "${nativeBuild}"),  string(name: 'RPM', value: "${rpmBuild}"), string(name: 'DOCKER', value: "${dockerBuild}")]
                }
            }
        }
    }

}