
# version, release and arch will be pasted here
%define name harvest
%define _python_bytecompile_errors_terminate_build 0

Name: %{name}
Summary: Storage System Monitoring
Version: %{version}
Release: %{release}
Source: %{name}_%{version}-%{release}.tgz
License: (c) NetApp
URL: https://www.support.netapp.com
Packager: Vachagan Gratian <vachagan@netapp.com>
AutoReq: no
Provides: harvest
BuildRoot: %{buildroot}
BuildArch: %{arch}

%description
Description: NetApp Harvest 2 - Monitoring of Storage Systems
 This application collects data from NetApp systems,
 forwards it to the Prometheus time series db, and
 provides Grafana dashboards for visualization.

%prep

%pre
# stop harvest before upgrade
if [ $1 = 2 ]; then
    if systemctl list-units --full -all | grep -Fq 'harvest.service'; then
      systemctl stop harvest && echo "stopped harvest ..."
    fi
    # Stop any harvest process which are not under systemctl
    ps -ef | grep -w -- --poller | grep -w bin/poller | awk '{print $2}' | xargs -r kill
    if [ $? -ne 0 ]; then
       echo "  --> Error while stopping pollers"
    fi
fi
# Backup existing harvest.yml to avoid overwrite from new binary
if [ -e $RPM_BUILD_ROOT/opt/harvest/harvest.yml ]; then
    cp $RPM_BUILD_ROOT/opt/harvest/harvest.yml $RPM_BUILD_ROOT/opt/harvest/backup_harvest.yml
    echo "  --> Backing up existing config file as [/opt/harvest/backup_harvest.yml]"
fi

%install
echo " --> unpacking package..."
mkdir -p $RPM_BUILD_ROOT/opt/
tar xvfz /tmp/build/rpm/SOURCES/%{name}_%{version}-%{release}.tgz -C $RPM_BUILD_ROOT/opt/
cd $RPM_BUILD_ROOT/opt/harvest
echo " --> installing harvest..."
cd $RPM_BUILD_ROOT/opt/harvest
mkdir -p $RPM_BUILD_ROOT/var/log/harvest

%post
# After installation/upgrade, copy latest harvest.yml as harvest.example.yml
if [ -e $RPM_BUILD_ROOT/opt/harvest/harvest.yml ]; then
    rm -rf $RPM_BUILD_ROOT/opt/harvest/harvest.example.yml
    cp $RPM_BUILD_ROOT/opt/harvest/harvest.yml $RPM_BUILD_ROOT/opt/harvest/harvest.example.yml
    echo " --> copy new harvest.yml as [/opt/harvest/harvest.example.yml]"
fi
# restore old harvest.yml in case of upgrade
if [ -e $RPM_BUILD_ROOT/opt/harvest/backup_harvest.yml ]; then
    rm -rf $RPM_BUILD_ROOT/opt/harvest/harvest.yml
    cp $RPM_BUILD_ROOT/opt/harvest/backup_harvest.yml $RPM_BUILD_ROOT/opt/harvest/harvest.yml
    rm -rf $RPM_BUILD_ROOT/opt/harvest/backup_harvest.yml
    echo " --> restoring existing harvest.yml as [/opt/harvest/harvest.yml]"
fi
getent group harvest > /dev/null 2>&1 || groupadd -r harvest && echo "  --> create harvest group"
getent passwd harvest > /dev/null 2>&1 || useradd -r -M -g harvest --shell=/sbin/nologin harvest && echo "  --> create harvest user"

chown -R harvest:harvest $RPM_BUILD_ROOT/opt/harvest/
chown -R harvest:harvest $RPM_BUILD_ROOT/var/log/harvest/
chmod -R u+s $RPM_BUILD_ROOT/opt/harvest/bin
chmod -R g+s $RPM_BUILD_ROOT/opt/harvest/bin
echo "  --> copying service"
cp $RPM_BUILD_ROOT/opt/harvest/service/harvest.service /etc/systemd/system/
chmod 664 /etc/systemd/system/harvest.service

# remove link from previous version, use /usr/bin to conform to linux fhs
if [ -e /usr/bin/harvest ]; then
    unlink /usr/bin/harvest
fi
systemctl daemon-reload
systemctl start harvest.service
systemctl enable harvest.service
echo "  --> harvest service started through systemctl"
if [ $1 = 1 ]; then
    echo " --> install complete! harvest directory /opt/harvest"
else
    echo " --> updated harvest! harvest directory /opt/harvest"
fi

%preun
# stop harvest before uninstall
if [ $1 = 0 ]; then
    echo "stopping harvest ..."
    systemctl stop harvest
    # Stop any harvest process which are not under systemctl
    ps -ef | grep -w -- --poller | grep -w -- --daemon | awk '{print $2}' | xargs -r kill
    if [ $? -ne 0 ]; then
       echo "  --> Error while stopping pollers"
    fi
    if [ -e /opt/harvest/harvest.yml ]; then
      cp /opt/harvest/harvest.yml /opt/harvest/backup_harvest.yml
      echo " --> Backing up existing config file as [/opt/harvest/backup_harvest.yml]"
    fi
fi

%postun
if [ $1 = 0 ]; then
    userdel harvest && echo "  --> delete harvest user"
    groupdel harvest && echo "  --> delete harvest group"
    if [ -e /usr/bin/harvest ]; then
        unlink /usr/bin/harvest && echo "  --> delete link"
    fi
    rm -rf /var/run/harvest && echo "  --> delete pid folder"
    rm -rf /usr/lib/tmpfiles.d/harvest.conf && echo "  --> removing tmpfiles.d harvest configuration"
    echo " --> removing systemctl harvest files "
    systemctl disable harvest.service
    rm /etc/systemd/system/harvest.service
    systemctl daemon-reload
    systemctl reset-failed
    # restore harvest.yml
    if [ -e /opt/harvest/backup_harvest.yml ]; then
      rm -rf /opt/harvest/harvest.yml
      cp /opt/harvest/backup_harvest.yml /opt/harvest/harvest.yml
      rm -rf /opt/harvest/backup_harvest.yml
      echo " --> restoring backup_harvest.yml as [/opt/harvest/harvest.yml]"
    fi
    # keep logs at var/log/harvest
    echo " --> kept log folder"
    echo " --> uninstall complete"
else
    echo " --> upgrade complete"
fi

%clean

%files
/opt/harvest
/var/log/harvest

